{"version":3,"sources":["things.js"],"names":["express","require","router","Router","bcrypt","saltRound","req","res","next","authMiddleware","console","use","get","resp","log","post","user","regeneratorRuntime","async","_context","prev","body","data","t0","Date","now","t1","t2","email","awrap","name","password","t3","sent","t4","t5","role","age","status","send","t6","concat","stop","_submittedPassword","savedPassword","fakeHashedPassword","_context2","submittedPassword","hash","compare","message","error","route","put","passwordMatched","params","mouseid","module","exports"],"mappings":"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","file":"things.min.js","sourcesContent":["'use strict';\r\nconst express = require(\"express\");\r\nconst bcrypt = require(\"bcrypt\");\r\nconst router = express.Router();\r\nlet saltRound = 13;\r\n\r\n\r\nconst authMiddleware = (req, res, next)=>{\r\n    \r\n    console.log(\"authenticiation is called\");\r\n    next();\r\n}\r\n\r\nrouter.use(authMiddleware);\r\n\r\nrouter.get(\"/\", (req, resp)=>{\r\n\r\n    console.log(\"i am inside root of this router-thing\");\r\n});\r\n\r\nrouter.post(\"/register\", async(req, res, next)=> {\r\n    try{\r\n        console.log(\"i am herer\")\r\n        console.log(req.body.data);\r\n        let user = {\r\n            _id: Date.now(),\r\n            name: req.body.data.name,\r\n            email:req.body.data.email,\r\n            password: await bcrypt.hash(req.body.data.password, saltRound),\r\n            age:req.body.data.age,\r\n            role:req.body.data.role\r\n        }\r\n\r\n        await res.status(201).send(user);\r\n    }\r\n    catch(err){\r\n        console.log(`${err} error happened`)\r\n    }\r\n}\r\n);\r\n\r\n\r\nrouter.post(\"/login\", async(req, res, next)=>{\r\n    \r\n    try{\r\n        //check if that email exist otherwise there is no point of hashing submitted password\r\n        let userMatched = true;\r\n        if(userMatched){\r\n    \r\n            let submittedPassword = req.body.data.password; \r\n            let savedPassword = await bcrypt.hash('Pulchowk@123', saltRound);\r\n            let passwordMatched = bcrypt.compare(submittedPassword, savedPassword);\r\n    \r\n            if(passwordMatched){\r\n    \r\n                console.log(\" party !! do login\");\r\n                res.status(200).send({status:200, message:\"guest is our user\"}) \r\n            }\r\n    \r\n            else{\r\n                console.log(\"sorry we dont recognize you\");\r\n                res.status(401).send({status: 401, error: \"Password didn't matched\" });\r\n            }\r\n    \r\n        }\r\n        //if that email doesnot match we don't send response within the spot rather we consume\r\n        //same amount time it take for if email matches\r\n        else {\r\n    \r\n            // fake pass\r\n            let fakeHashedPassword = `$2B$${saltRound}passwordisaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa`;\r\n            bcrypt.compare(submittedPassword, fakeHashedPassword);\r\n            res.status(401).send({status:401, error:\"your credential doesnot match with ours\"});\r\n        }\r\n            \r\n    }\r\n    catch(err){\r\n        console.log(`${err} is catched`);\r\n    }\r\n});\r\n\r\n\r\n\r\nrouter.route(\"/mouse\")\r\n    .get((req, res)=>{\r\n        console.log(\"get all mouse\");\r\n    })\r\n    .put((req, res)=>{\r\n        console.log(\"add new mouse\");\r\n    })\r\n\r\nrouter.route(\"/mouse/:mouseid\")\r\n.get((req, res)=>{\r\n    console.log(`i demand the mouse with id ${req.params.mouseid}`);\r\n})\r\n.put((req, res)=>[\r\n    console.log(`i demand to update the mouse with id of ${req.params.mouseid}`)\r\n])\r\n\r\nmodule.exports = router;\r\n"]}