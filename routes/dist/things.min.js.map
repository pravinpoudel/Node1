{"version":3,"sources":["things.js"],"names":["express","require","router","Router","bcrypt","saltRound","req","res","next","console","log","authMiddleware","use","post","user","regeneratorRuntime","async","_context","prev","body","data","t0","Date","now","t1","t2","email","awrap","name","password","t3","sent","t4","t5","role","age","status","send","t6","concat","stop","_submittedPassword","savedPassword","fakeHashedPassword","_context2","submittedPassword","hash","compare","message","error","route","get","put","passwordMatched","params","mouseid","module","exports"],"mappings":"AAAA,aACA,IAAMA,QAAUC,QAAQ,WAAlBD,OAAUC,QAAQ,UAElBC,OAASF,QAAQG,SADjBC,UAASH,GAEXI,eAAJ,SAAAC,EAAAC,EAAAC,GAIIC,QAAQC,IAAI,6BADVC,KAGLT,OAHDU,IAAAD,gBAKAT,OAAOU,IAAID,IAAAA,SAAAA,EAAAA,GAIPF,QAAQC,IAAI,2CAISR,OAAAW,KAAA,YAAA,SAAAP,EAAAC,GAAA,IAAAO,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAT,MAAA,KAAA,EAAA,OAAAS,EAAAC,KAAA,EAAAT,QAAAC,IAAA,cAAAD,QAAAC,IAAAJ,EAAAa,KAAAC,MAAAH,EAAAI,GAEVC,KAAKC,MAFKN,EAAAO,GAGTd,EAAIJ,KAAIa,KAAKC,KAHJH,EAAAQ,GAAAnB,EAAAa,KAKRG,KAAAI,MALQT,EAAAT,KAAA,EAAAO,mBAAAY,MAMHR,OAAKC,KAAKQ,EANPT,KAAAC,KAAAS,SAAAxB,YAAA,KAAA,EAAA,OAAAY,EAAAa,GAAAb,EAAAc,KAAAd,EAAAe,GAAA1B,EAAAa,KAOPb,KAAIa,IAPGF,EAAAgB,GAAA3B,EAAAa,KAAAC,KAAAc,KAAApB,EAAA,CAEjBL,IAFiBQ,EAAAI,GAGjBZ,KAHiBQ,EAAAO,GAAAE,MAAAT,EAAAQ,GAAAI,SAAAZ,EAAAa,GAAAK,IAAAlB,EAAAe,GAAAE,KAAAjB,EAAAgB,IAAAhB,EAAAT,KAAA,GAAAO,mBAAAY,MAAApB,EAAA6B,OAAA,KAAAC,KAAAvB,IAAA,KAAA,GAAAG,EAAAT,KAAA,GAAA,MAAA,KAAA,GAAAS,EAAAC,KAAA,GAAAD,EAAAqB,GAAArB,EAAA,MAAA,GAAAR,QAAAC,IAAA,GAAA6B,OAAAtB,EAAAqB,GAAA,oBAAA,KAAA,GAAA,IAAA,MAAA,OAAArB,EAAAuB,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,QASbL,OAAAA,KAAAA,SATa,SAAA7B,EAAAC,GAAA,IAAAkC,EAAAC,EAAAC,EAAA,OAAA5B,mBAAAC,MAAA,SAAA4B,GAAA,OAAA,OAAAA,EAAA1B,KAAA0B,EAAApC,MAAA,KAAA,EAAA,OAAAoC,EAAA1B,KAAA,GAAA,EAAA2B,EAAAvC,EAAAa,KAAAC,KAAAS,SAAAe,EAAApC,KAAA,EAAAO,mBAAAY,MAAAvB,OAAA0C,KAAA,eAAAzC,YAAA,KAAA,EAAAqC,EAAAE,EAAAb,KA+BS3B,OAAO2C,QAAQF,EAAmBH,IAf5DjC,QAAAC,IAAA,sBAoBQH,EAAI6B,OAAO,KAAKC,KAAK,CAACD,OAAO,IAAKY,QAAQ,wBApCjCvC,QAAAC,IAAA,+BAAAH,EAAA6B,OAAA,KAAAC,KAAA,CAAAD,OAAA,IAAAa,MAAA,6BAAAL,EAAApC,KAAA,GAAA,MAAA,KAAA,GAsBHmC,EAtBG,OAAAJ,OAsBHlC,UAtBG,+EAsBHD,OAAA2C,QAAAF,kBAAAF,GAGdpC,EAAA6B,OAAA,KAAAC,KAAA,CAAAD,OAAA,IAAAa,MAAA,4CAzBiB,KAAA,GAAAL,EAAApC,KAAA,GAAA,MAAA,KAAA,GAAAoC,EAAA1B,KAAA,GAAA0B,EAAAvB,GAAAuB,EAAA,MAAA,GAsBHnC,QAAAC,IAAA,GAAA6B,OAAAK,EAAAvB,GAAA,gBAtBG,KAAA,GAAA,IAAA,MAAA,OAAAuB,EAAAJ,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,QA+DzBtC,OAAOgD,MAAM,UAzCSC,IAAA,SAAA7C,EAAAC,GAQNmC,QAAAA,IAAAA,mBAqCXU,IAAI,SAAC9C,EAAKC,GAlCHE,QAAG4C,IAAAA,mBAGuBjB,OAAAA,MAAAA,mBAAYY,IAAAA,SAAAA,EAAAA,GAAbvC,QAAAC,IAAA,8BAAA6B,OAArBjC,EAAAgD,OAAAC,YAIA9C,IAAAA,SAAAA,EAAAA,GAAAA,MAAAA,CACAF,QAAAA,IAAAA,2CAAAA,OAAqBD,EAAAgD,OAAAC,aAAAC,OAAAC,QAArBvD","file":"things.min.js","sourcesContent":["'use strict';\r\nconst express = require(\"express\");\r\nconst bcrypt = require(\"bcrypt\");\r\nconst router = express.Router();\r\nlet saltRound = 13;\r\n\r\n\r\nconst authMiddleware = (req, res, next)=>{\r\n    console.log(\"authenticiation is called\");\r\n    next();\r\n}\r\n\r\nrouter.use(authMiddleware);\r\n\r\nrouter.get(\"/\", (req, resp)=>{\r\n\r\n    console.log(\"i am inside root of this router-thing\");\r\n});\r\n\r\n\r\nrouter.post(\"/register\", async(req, res, next)=> {\r\n    try{\r\n        console.log(\"i am herer\")\r\n        console.log(req.body.data);\r\n        let user = {\r\n            _id: Date.now(),\r\n            name: req.body.data.name,\r\n            email:req.body.data.email,\r\n            password: await bcrypt.hash(req.body.data.password, saltRound),\r\n            age:req.body.data.age,\r\n            role:req.body.data.role\r\n        }\r\n\r\n        await res.status(201).send(user);\r\n    }\r\n    catch(err){\r\n        console.log(`${err} error happened`)\r\n    }\r\n}\r\n);\r\n\r\n\r\nrouter.post(\"/login\", async(req, res, next)=>{\r\n    \r\n    try{\r\n        //check if that email exist otherwise there is no point of hashing submitted password\r\n        let userMatched = true;\r\n        if(userMatched){\r\n    \r\n            let submittedPassword = req.body.data.password; \r\n            let savedPassword = await bcrypt.hash('Pulchowk@123', saltRound);\r\n            let passwordMatched = bcrypt.compare(submittedPassword, savedPassword);\r\n    \r\n            if(passwordMatched){\r\n    \r\n                console.log(\" party !! do login\");\r\n                res.status(200).send({status:200, message:\"guest is our user\"}) \r\n            }\r\n    \r\n            else{\r\n                console.log(\"sorry we dont recognize you\");\r\n                res.status(401).send({status: 401, error: \"Password didn't matched\" });\r\n            }\r\n    \r\n        }\r\n        //if that email doesnot match we don't send response within the spot rather we consume\r\n        //same amount time it take for if email matches\r\n        else {\r\n    \r\n            // fake pass\r\n            let fakeHashedPassword = `$2B$${saltRound}passwordisaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa`;\r\n            bcrypt.compare(submittedPassword, fakeHashedPassword);\r\n            res.status(401).send({status:401, error:\"your credential doesnot match with ours\"});\r\n        }\r\n            \r\n    }\r\n    catch(err){\r\n        console.log(`${err} is catched`);\r\n    }\r\n});\r\n\r\n\r\n\r\nrouter.route(\"/mouse\")\r\n    .get((req, res)=>{\r\n        console.log(\"get all mouse\");\r\n    })\r\n    .put((req, res)=>{\r\n        console.log(\"add new mouse\");\r\n    })\r\n\r\nrouter.route(\"/mouse/:mouseid\")\r\n.get((req, res)=>{\r\n    console.log(`i demand the mouse with id ${req.params.mouseid}`);\r\n})\r\n.put((req, res)=>[\r\n    console.log(`i demand to update the mouse with id of ${req.params.mouseid}`)\r\n])\r\n\r\nmodule.exports = router;\r\n"]}