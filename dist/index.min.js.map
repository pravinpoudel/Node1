{"version":3,"sources":["index.js"],"names":["express","require","path","cors","http","apiRoute","sup","sup2","thing","mongoose","Router","port","process","connect","env","DB_CONNECT","useNewUrlParser","useUnifiedTopology","then","console","log","err","concat","app","json","join","__dirname","set","acceptedOrigin","use","origin","callback","originState","indexOf","Error","corsOption","router","get","req","res","url","root","redirect","index"],"mappings":"AAAA,aAEA,IAAMA,QAAUC,QAAQ,WAClBC,KAAOD,QAAQ,QAAfC,KAAOD,QAAQ,QAEfE,KAAOF,QAAQ,QADfG,MAAOH,QAAQ,mBAGfI,SAAWJ,QAAQ,qBAFnBE,SAAOF,QAAO,qBAIAA,QAAQ,YAArBK,aAAAA,IAAKC,cAAAA,KAHZN,QAAMO,UAAQP,SACd,IAAMI,IAAQL,UACRS,OAAWR,QAAQS,SAQrBC,KAAOC,QAPSX,IAAQU,MAAA,IAS5BF,SAASI,QAAQD,QAAQE,IAAIC,WAAY,CAAEC,iBAAiB,EAAOC,oBAAoB,IAAQC,KAAK,WAClGC,QAAQC,IAAI,2BADd,MARQ,SAAAC,GAWJF,QAAQC,IAAR,GAAAE,OAAeD,EAAf,+BALJE,IAAIZ,IAAIR,QAERM,IAAAA,IAAQT,QAARwB,QAA2CR,IAAAA,IAAAA,UAAiBR,OAAOS,IAAAA,IAAAA,OAAAA,UACjEE,IAAAA,IAAAA,QAAYjB,KAAAuB,KAAAC,UAAZ,UACDH,IAFDI,IAAA,cAEUN,OAET,IAJDO,eAAA,CAAA,0BAAA,0BAAA,yBAOIC,WAAYL,CAAAA,OAAhB,SAAAM,EAAAC,GAEIF,IAAIG,EAmBAA,GAhBR,IAAQJ,eAAeK,QAAvBH,IAAAA,GAUuBA,EAAQ,CAAAA,QAAA,GAAvB,IAAAI,MAAA,gCANJC,EAAa,CAAAL,QAAA,GAAU,MAYNE,KAEhBT,IAAAM,IAAAO,QAGJA,OAAAC,IAAA,IAAAlC,KAAAgC,YAAA7B,IAAAC,KAAA,SAAA+B,EAAAC,GAGGV,EAAIO,OAAR,SAGAA,QAAWhB,IAAMjB,EAAIqC,KAEjBD,QAAAnB,IAAW,sBAEXD,EAAAA,SAAY,aAAA,CAAAsB,KACZvC,KAAAuB,KAAAC,UAAA,gBASJU,OAAOC,IAAI,OAAQ,SAAAC,EAAAC,GAAnBA,EAAAG,SAAA,IAAA,UAaAN,OAAAC,IAAA,OAAA,SAAAC,EAAAC,GACIV,EAAI7B,KAAAA,yBAKHuB,IAAAM,IAAA7B,QAAA,OAAA,SAAA,CAAA2C,OAAA,KACDxB,IAAAA,OAAQC,KAAR,SAAAC,GAJJ,GAAAA,EAEQ,OAAOF,QAAQC,IAAI,kBAEvBD,QAAQC,IAAR,yBAAAE,OAAqCX","file":"index.min.js","sourcesContent":["\"use strict\";\r\n\r\nconst express = require(\"express\");\r\nconst path = require(\"path\");\r\nconst http = require(\"http\");\r\nconst cors = require(\"cors\");\r\nconst thing = require(\"./routes/things\");\r\nconst apiRoute = require(\"./routes/apiRoute\");\r\nconst mongoose = require(\"mongoose\");\r\nconst {sup, sup2} = require(\"./middle\");\r\nrequire(\"dotenv\").config();\r\n\r\nconst app = express();\r\n\r\nconst router = express.Router();\r\n\r\nlet port = process.env.port || 4000;\r\n\r\nmongoose.connect(process.env.DB_CONNECT, { useNewUrlParser: true , useUnifiedTopology: true }).then(()=>{\r\n  console.log(\"sucessfully connected\");\r\n}).catch((err)=>{\r\n    console.log(`${err} error is in the program`)\r\n});\r\n\r\napp.use(cors());\r\napp.use(express.json());\r\napp.use('/things', thing);\r\napp.use(\"/api\", apiRoute);\r\n\r\napp.set('views', path.join(__dirname, \"views\"));\r\napp.set(\"view engine\", \"pug\");\r\n\r\nlet acceptedOrigin = [\"http://www.example1.com\", \"http://www.example2.com\", \"http://localhost:3000\"]\r\n\r\nlet corsOption = { origin: function corsCheck(origin, callback){\r\n\r\n    let originState, error;\r\n\r\n    if( acceptedOrigin.indexOf(origin) !== -1 || !origin){\r\n\r\n        originState = {origin: true}\r\n        error = null;\r\n    }\r\n\r\n    else{\r\n\r\n        originState ={origin: false}\r\n        error = new Error(\"this origin isnot allowded\")\r\n    }\r\n\r\n    callback( error, originState);\r\n}\r\n}\r\n\r\napp.use(router);\r\n\r\n\r\nrouter.get(\"/\",  cors(corsOption), sup, sup2, (req, res)=>{\r\n\r\n    res.render('index');\r\n    console.log(req.url);\r\n    console.log(\"root url is called\");\r\n    // sendfile demand absolute path so for that we have option with root\r\n    res.sendFile('index.html', {root: path.join( __dirname, '/public/')});\r\n    //note that we are not providing absolute path by our own or with __dirname concatinated with public \r\n    // because this may conflict with the convention of front slash and back slash so here path.join() come handy\r\n\r\n});\r\n\r\n// Redirect OLD url to NEW ------------------------------------------------------------\r\n\r\nrouter.get(\"/old\", (req, res)=>{\r\n\r\n    res.redirect(302, \"/new\");\r\n\r\n});\r\n\r\nrouter.get(\"/new\", (req, res)=>{\r\n\r\n    res.send(\"<h1> I AM NEW </h1>\");\r\n});\r\n\r\n// -------------------------------------------------------------------------------------\r\n\r\n// here since we have option with false indexing mean that it wont take index.html as a default file for 404 in static serve also\r\napp.use(express.static('public', {index: false}));\r\n\r\napp.listen(port, (err)=> {\r\n    if(err){\r\n        return(console.log(\"i am listening\"));\r\n    }\r\n    console.log(`listening to the port ${port}`);\r\n});"]}