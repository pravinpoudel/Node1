{"version":3,"sources":["index.js"],"names":["express","require","http","path","thing","apiRoute","config","app","use","json","router","Router","set","join","__dirname","console","log","process","sup2","port","env","corsOption","originState","origin","callback","acceptedOrigin","indexOf","error","end","get","cors","sup","req","res","render","redirect","url","send","root","err","index","listen","concat"],"mappings":"AAAA,aACA,IAAMA,QAAUC,QAAQ,WAAlBD,KAAOC,QAAU,QAEjBC,KAAOD,QAAQ,QADfE,KAAOF,QAAQ,QAGfG,MAAQH,QAAQ,mBAFhBC,SAAOD,QAAO,qBAGdI,IAAQL,UAMdC,QAAS,UAAUK,SAInBC,IAAIC,IAAIR,QAAQS,QAEhB,IAAMC,OAASV,QAAQW,SAGvBJ,IAAIC,IAAI,UAAWJ,OAGnBG,IAAIC,IAAI,OAAQH,UAIhBE,IAAIK,IAAI,QAAAT,KAARU,KAAuBC,UAAvB,UAEAC,IAAAA,IAAQC,cAAR,OAAAD,QAAQC,IAAIC,QAEQhB,kBAARiB,QAAgB,YAAhBA,aAAAA,IAAAA,cAAAA,KAERC,KAAOF,QAAQG,IAAID,MAAQ,IAI3BE,eAAa,CAAA,0BAAA,2BAGbA,WAAIC,CAAJC,OAAA,SAAAA,EAAAC,GAIIF,IAAAA,EAgBRE,GAhBQ,IAAAC,eAAAC,QAAAH,IAAAA,GAMAD,EAAa,CAACC,QAAQ,GAIhBI,IAAOL,MAAAA,gCAZjBA,EAMI,CAAAC,QAAA,GAEAD,MAURA,KAYIM,IAAAA,IAAGlB,QAMHA,OAAAmB,IAAA,IAAAC,KAAAT,YAAAU,IAAAb,KAAA,SAAAc,EAAAC,GAPAA,EAAIC,OAAO,SAafxB,MAEIuB,QAAIE,IAASH,EAAKI,KAFtBrB,QAAAC,IAAA,sBAQIiB,EAAII,SAAK,aAAA,CAATC,KAAAnC,KAAAU,KAAAC,UAAA,gBASAJ,OAAG6B,IAAI,OAAA,SAAAP,EAAAC,GAENA,EAAAE,SAAA,IAAA,UAbLzB,OAAOmB,IAAI,OAAQ,SAACG,EAAKC,GAErBA,EAAII,KAAK,yBAMb9B,IAAIC,IAAIR,QAAO,OAAQ,SAAU,CAACwC,OAAO,KAEzCjC,IAAIkC,OAAOtB,KAAM,SAACoB,GACd,GAAGA,EACC,OAAOxB,QAAQC,IAAI,kBAEvBD,QAAQC,IAAR,yBAAA0B,OAAqCvB","file":"index.min.js","sourcesContent":["\"use strict\";\r\nconst express = require(\"express\");\r\nconst path = require(\"path\");\r\nconst http = require(\"http\");\r\nconst cors = require(\"cors\");\r\nconst thing = require(\"./routes/things\");\r\nconst apiRoute = require(\"./routes/apiRoute\");\r\n\r\n\r\n\r\n// const { response } = require(\"express\");\r\n\r\nconst app = express();\r\n\r\n// here we create an object called app that is gonna be our webserver\r\nrequire(\"dotenv\").config();\r\napp.use(express.json());\r\n\r\nconst router = express.Router();\r\n\r\n// anything that begins with things should go to things file\r\napp.use('/things', thing);\r\n// handle endpoints that start with things with things\r\n\r\napp.use(\"/api\", apiRoute);\r\n\r\n// load view engine\r\napp.set('views', path.join(__dirname, \"views\"));\r\napp.set(\"view engine\", \"pug\");\r\n\r\nconsole.log(process.env)\r\n\r\nconst {sup, sup2} = require(\"./middle\");\r\n\r\nlet port = process.env.port || 3000;\r\n\r\nlet acceptedOrigin = [\"http://www.example1.com\", \"http://www.example2.com\",]\r\n\r\nlet corsOption = { origin: function corsCheck(origin, callback){\r\n\r\n\r\n    let originState, error;\r\n\r\n    if( acceptedOrigin.indexOf(origin) !== -1 || !origin){\r\n\r\n        originState = {origin: true}\r\n        error = null;\r\n    }\r\n\r\n    else{\r\n\r\n        originState ={origin: false}\r\n        error = new Error(\"this origin isnot allowded\")\r\n    }\r\n\r\n    callback( error, originState);\r\n}\r\n}\r\n\r\n\r\n// for all request\r\n// app.use(sup);\r\n\r\napp.use(router);\r\n\r\n// ---------------------------------------------------------------------------\r\n// adding middleware after the route will call this middleware to this specific condition in a order they appear and \r\n// then the request handler is called at last\r\n\r\n\r\nrouter.get(\"/\",  cors(corsOption), sup, sup2, (req, res)=>{\r\n\r\n    res.render('index');\r\n    end();\r\n    console.log(req.url);\r\n    console.log(\"root url is called\");\r\n    // sendfile demand absolute path so for that we have option with root\r\n    res.sendFile('index.html', {root: path.join( __dirname, '/public/')});\r\n    //note that we are not providing absolute path by our own or with __dirname concatinated with public \r\n    // because this may conflict with the convention of front slash and back slash so here path.join() come handy\r\n\r\n});\r\n\r\n// Redirect OLD url to NEW ------------------------------------------------------------\r\n\r\nrouter.get(\"/old\", (req, res)=>{\r\n\r\n    res.redirect(302, \"/new\");\r\n\r\n});\r\n\r\nrouter.get(\"/new\", (req, res)=>{\r\n\r\n    res.send(\"<h1> I AM NEW </h1>\");\r\n});\r\n\r\n// -------------------------------------------------------------------------------------\r\n\r\n// here since we have option with false indexing mean that it wont take index.html as a default file for 404 in static serve also\r\napp.use(express.static('public', {index: false}));\r\n\r\napp.listen(port, (err)=> {\r\n    if(err){\r\n        return(console.log(\"i am listening\"));\r\n    }\r\n    console.log(`listening to the port ${port}`);\r\n});"]}