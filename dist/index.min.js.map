{"version":3,"sources":["index.js"],"names":["express","require","path","cors","http","thing","mongoose","sup","config","env","JWT_KEY","apiRoute","Router","port","process","connect","DB_CONNECT","useNewUrlParser","useUnifiedTopology","then","console","log","err","concat","app","router","join","__dirname","use","origin","callback","originState","acceptedOrigin","Error","error","sup2","req","res","render","url","root","get","redirect","send","index","listen"],"mappings":"AAAA,aAEA,IAAMA,QAAUC,QAAQ,WAClBC,KAAOD,QAAQ,QAAfC,KAAOD,QAAQ,QAEfE,KAAOF,QAAQ,QADfG,IAAOH,QAAQ,gBAGfI,MAAQJ,QAAQ,mBAFhBE,SAAOF,QAAO,qBAIdK,SAAWL,QAAQ,qBAHLA,QAAA,YAAXM,aAAAA,IAAGN,cAAAA,KAKZA,QAAQ,UAAUO,SAJlB,IAAMH,QAAQJ,QAAQQ,IAAAC,QAChBC,IAAQX,UACRM,OAAWL,QAAQW,SASrBC,KAAOC,QARSb,IAAQY,MAAA,IAU5BP,SAASS,QAAQD,QAAQL,IAAIO,WAAY,CAAEC,iBAAiB,EAAOC,oBAAoB,IAAQC,KAAK,WAClGC,QAAQC,IAAI,2BADd,MATQ,SAAAC,GAYJF,QAAQC,IAAR,GAAAE,OAAeD,EAAf,+BAPJE,IAAMC,IAAAA,QAEND,IAAIX,IAAIb,QAAGc,QAEXR,IAAAA,IAAQ,UAASQ,OAA0BG,IAAAA,IAAAA,OAAAA,UAAFO,IAAsDL,IAAK,QAAAjB,KAAIwB,KAAAC,UAAA,UACtGP,IAAAA,IAAAA,cAAY,OAEVA,IAAAA,eAAA,CAAA,0BAAA,0BAAA,yBAGAQ,WAAJ,CAAAC,OAAA,SAAAA,EAAAC,GAEIF,IAAIG,EAgBHD,GAbiC,IAA9BE,eAAcN,QAAKC,IAA3BE,GAWQE,EAAc,CAAAF,QAAA,GAAS,IAAAI,MAAA,gCAR3BD,EAAkB,CAAAH,QAAA,GAER,MAUNE,KAGAG,IAAAA,IAAAA,QAGJJ,OAAAA,IAAAA,IAAUI,KAAOH,YAAjBxB,IAAA4B,KAAA,SAAAC,EAAAC,GAhBJA,EAAAC,OAAA,SAoBIV,QAAIH,IAARW,EAAAG,KAGAd,QAAWJ,IAAMlB,sBAGbiB,EAAAA,SAAe,aAAf,CAAAoB,KAAAtC,KAAAwB,KAAAC,UAAA,gBAWJF,OAAOgB,IAAI,OAAQ,SAACL,EAAKC,GAErBA,EAAIK,SAAS,IAAK,UAOrBjB,OAEDgB,IAAA,OAAA,SAAAL,EAAAC,GAHIA,EAAIM,KAAK,yBAULnB,IAAAI,IAAA5B,QAAOoB,OAAY,SAAA,CAAAwB,OAAnB,KAFRpB,IAAIqB,OAAOhC,KAAM,SAACS,GAIdF,GAAAA,EAJJ,OAAAA,QAAAC,IAAA,kBAIID,QAAQC,IAAR,yBAAAE,OAAqCV","file":"index.min.js","sourcesContent":["\"use strict\";\r\n\r\nconst express = require(\"express\");\r\nconst path = require(\"path\");\r\nconst http = require(\"http\");\r\nconst cors = require(\"cors\");\r\nconst jwt = require(\"jsonwebtoken\")\r\nconst thing = require(\"./routes/things\");\r\nconst apiRoute = require(\"./routes/apiRoute\");\r\nconst mongoose = require(\"mongoose\");\r\nconst {sup, sup2} = require(\"./middle\");\r\nrequire(\"dotenv\").config();\r\nconst JWT_KEY = process.env.JWT_KEY;\r\n\r\nconst app = express();\r\n\r\nconst router = express.Router();\r\n\r\nlet port = process.env.port || 4000;\r\n\r\nmongoose.connect(process.env.DB_CONNECT, { useNewUrlParser: true , useUnifiedTopology: true }).then(()=>{\r\n  console.log(\"sucessfully connected\");\r\n}).catch((err)=>{\r\n    console.log(`${err} error is in the program`)\r\n});\r\n\r\napp.use(cors());\r\napp.use(express.json());\r\napp.use('/things', thing);\r\napp.use(\"/api\", apiRoute);\r\n\r\napp.set('views', path.join(__dirname, \"views\"));\r\napp.set(\"view engine\", \"pug\");\r\n\r\nlet acceptedOrigin = [\"http://www.example1.com\", \"http://www.example2.com\", \"http://localhost:3000\"]\r\n\r\nlet corsOption = { origin: function corsCheck(origin, callback){\r\n\r\n    let originState, error;\r\n\r\n    if( acceptedOrigin.indexOf(origin) !== -1 || !origin){\r\n\r\n        originState = {origin: true}\r\n        error = null;\r\n    }\r\n\r\n    else{\r\n\r\n        originState ={origin: false}\r\n        error = new Error(\"this origin isnot allowded\")\r\n    }\r\n\r\n    callback( error, originState);\r\n}\r\n}\r\n\r\napp.use(router);\r\n\r\n\r\nrouter.get(\"/\",  cors(corsOption), sup, sup2, (req, res)=>{\r\n\r\n    res.render('index');\r\n    console.log(req.url);\r\n    console.log(\"root url is called\");\r\n    // sendfile demand absolute path so for that we have option with root\r\n    res.sendFile('index.html', {root: path.join( __dirname, '/public/')});\r\n    //note that we are not providing absolute path by our own or with __dirname concatinated with public \r\n    // because this may conflict with the convention of front slash and back slash so here path.join() come handy\r\n\r\n});\r\n\r\n// Redirect OLD url to NEW ------------------------------------------------------------\r\n\r\nrouter.get(\"/old\", (req, res)=>{\r\n\r\n    res.redirect(302, \"/new\");\r\n\r\n});\r\n\r\nrouter.get(\"/new\", (req, res)=>{\r\n\r\n    res.send(\"<h1> I AM NEW </h1>\");\r\n});\r\n\r\n// -------------------------------------------------------------------------------------\r\n\r\n// here since we have option with false indexing mean that it wont take index.html as a default file for 404 in static serve also\r\napp.use(express.static('public', {index: false}));\r\n\r\napp.listen(port, (err)=> {\r\n    if(err){\r\n        return(console.log(\"i am listening\"));\r\n    }\r\n    console.log(`listening to the port ${port}`);\r\n});"]}