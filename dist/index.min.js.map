{"version":3,"sources":["index.js"],"names":["express","require","http","path","thing","mongoose","cors","Router","sup","sup2","process","env","port","apiRoute","console","log","DB_CONNECT","router","useNewUrlParser","useUnifiedTopology","then","err","app","json","join","__dirname","set","use","origin","callback","originState","acceptedOrigin","indexOf","Error","corsOption","get","req","res","end","render","url","root","sendFile","redirect","index","listen","concat"],"mappings":"AAAA,aACA,IAAMA,QAAUC,QAAQ,WAAlBD,KAAOC,QAAU,QAEjBC,KAAOD,QAAQ,QADfE,KAAOF,QAAQ,QAGfG,MAAQH,QAAQ,mBAFhBC,SAAOD,QAAO,qBAIdI,SAAWJ,QAAQ,YAHnBK,OAAOL,QAAQM,kBAKDN,QAAQ,YAArBO,aAAAA,IAAKC,cAAAA,KAJNL,KAAKM,QAAUC,IAACC,MAAA,IACtBX,QAAMY,UAAWZ,SACjB,IAAMI,IAAQL,UAQdc,QAAQC,IAAIL,QAAQC,IAAIK,YAPxBX,SAAMY,QAASjB,QAAQO,IAAvBS,WAAA,CAAAE,iBAAA,EAAAC,oBAAA,IAAAC,KAAA,WASEN,QAAQC,IAAI,2BATd,MAUS,SAACM,GATHb,QAUKO,IAVLP,GAAAA,OAAAA,EAAAA,+BACPc,IAAIV,IAAIN,QAERL,IAAAA,IAAQD,QAADuB,QAGPT,IAAAA,IAAQC,UAAWX,OACwBc,IAAAA,IAAAA,OAAAA,UACzCJ,IAAAA,IAAAA,QAAYX,KAAAqB,KAAAC,UAAZ,UACDH,IAFDI,IAAA,cAEUL,OAMVC,IAAIK,eAAI,CAAR,0BACA,0BAAA,yBAEIA,WAAJ,CAAmBvB,OACnB,SAAAwB,EAAAC,GAcI,IAAIC,EAUAA,GAnBR,IAAQC,eAAeC,QAAvBJ,IAAAA,GAauBA,EAAQ,CAAAA,QAAA,GAAvB,IAAAK,MAAA,gCAPJC,EAAa,CAAAN,QAAA,GAAU,MAaNE,KAbJR,IAsBjBK,IAAAV,QAUAA,OAAOkB,IAAI,IAAM7B,KAAK4B,YAAa1B,IAAKC,KAAM,SAAA2B,EAAAC,GAG1CC,EAAGC,OAAA,SACHzB,MACAA,QAAQC,IAAIqB,EAAAI,KAAZ1B,QAAQC,IAAI,sBAEgB0B,EAAIC,SAAOlB,aAAiB,CAAAiB,KAAAtC,KAAtBqB,KAAAC,UAAA,gBActCR,OAAOkB,IAAI,OAAQ,SAAAC,EAAAC,GAKnBA,EAAAM,SAAA,IAAA,UAGkCC,OAAKT,IAAE,OAAA,SAAAC,EAAAC,GAErCQ,EAAAA,KAAOjC,yBAKVU,IALDK,IAAA3B,QAAA,OAAA,SAAA,CAAA4C,OAAA,KAAAtB,IAAIuB,OAAOjC,KAAM,SAACS,GACd,GAAGA,EACC,OAAOP,QAAQC,IAAI,kBAEvBD,QAAQC,IAAR,yBAAA+B,OAAqClC","file":"index.min.js","sourcesContent":["\"use strict\";\r\nconst express = require(\"express\");\r\nconst path = require(\"path\");\r\nconst http = require(\"http\");\r\nconst cors = require(\"cors\");\r\nconst thing = require(\"./routes/things\");\r\nconst apiRoute = require(\"./routes/apiRoute\");\r\nconst mongoose = require(\"mongoose\");\r\nconst router = express.Router();\r\nconst {sup, sup2} = require(\"./middle\");\r\nlet port = process.env.port || 4000;\r\n\r\nrequire(\"dotenv\").config();\r\n\r\nconst app = express();\r\nconsole.log(process.env.DB_CONNECT)\r\nmongoose.connect(process.env.DB_CONNECT, { useNewUrlParser: true , useUnifiedTopology: true }).then(()=>{\r\n  console.log(\"sucessfully connected\");\r\n}).catch((err)=>{\r\n    console.log(`${err} error is in the program`)\r\n});\r\n\r\napp.use(cors());\r\n\r\napp.use(express.json());\r\n// anything that begins with things should go to things file\r\n\r\napp.use('/things', thing);\r\n// handle endpoints that start with things with things\r\napp.use(\"/api\", apiRoute);\r\n\r\n// load view engine\r\napp.set('views', path.join(__dirname, \"views\"));\r\napp.set(\"view engine\", \"pug\");\r\n\r\n\r\n\r\nlet acceptedOrigin = [\"http://www.example1.com\", \"http://www.example2.com\", \"http://localhost:3000\"]\r\n\r\nlet corsOption = { origin: function corsCheck(origin, callback){\r\n\r\n\r\n    let originState, error;\r\n\r\n    if( acceptedOrigin.indexOf(origin) !== -1 || !origin){\r\n\r\n        originState = {origin: true}\r\n        error = null;\r\n    }\r\n\r\n    else{\r\n\r\n        originState ={origin: false}\r\n        error = new Error(\"this origin isnot allowded\")\r\n    }\r\n\r\n    callback( error, originState);\r\n}\r\n}\r\n\r\n\r\n// for all request\r\n// app.use(sup);\r\n\r\napp.use(router);\r\n\r\n// ---------------------------------------------------------------------------\r\n// adding middleware after the route will call this middleware to this specific condition in a order they appear and \r\n// then the request handler is called at last\r\n\r\n\r\nrouter.get(\"/\",  cors(corsOption), sup, sup2, (req, res)=>{\r\n\r\n    res.render('index');\r\n    end();\r\n    console.log(req.url);\r\n    console.log(\"root url is called\");\r\n    // sendfile demand absolute path so for that we have option with root\r\n    res.sendFile('index.html', {root: path.join( __dirname, '/public/')});\r\n    //note that we are not providing absolute path by our own or with __dirname concatinated with public \r\n    // because this may conflict with the convention of front slash and back slash so here path.join() come handy\r\n\r\n});\r\n\r\n// Redirect OLD url to NEW ------------------------------------------------------------\r\n\r\nrouter.get(\"/old\", (req, res)=>{\r\n\r\n    res.redirect(302, \"/new\");\r\n\r\n});\r\n\r\nrouter.get(\"/new\", (req, res)=>{\r\n\r\n    res.send(\"<h1> I AM NEW </h1>\");\r\n});\r\n\r\n// -------------------------------------------------------------------------------------\r\n\r\n// here since we have option with false indexing mean that it wont take index.html as a default file for 404 in static serve also\r\napp.use(express.static('public', {index: false}));\r\n\r\napp.listen(port, (err)=> {\r\n    if(err){\r\n        return(console.log(\"i am listening\"));\r\n    }\r\n    console.log(`listening to the port ${port}`);\r\n});"]}