{"version":3,"sources":["index.js"],"names":["express","require","path","http","cors","thing","app","use","json","router","Router","set","join","__dirname","sup","sup2","port","process","env","acceptedOrigin","corsOption","origin","corsCheck","callback","originState","error","indexOf","Error","get","req","res","render","end","console","log","url","sendFile","root","redirect","send","index","listen","err"],"mappings":"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","sourcesContent":["\"use strict\";\r\nconst express = require(\"express\");\r\nconst path = require(\"path\");\r\nconst http = require(\"http\");\r\nconst cors = require(\"cors\");\r\nconst thing = require(\"./routes/things\");\r\n\r\n// const { response } = require(\"express\");\r\n\r\n\r\n// here we create an object called app that is gonna be our webserver\r\nconst app = express();\r\napp.use(express.json());\r\n\r\nconst router = express.Router();\r\n\r\n// anything that begins with things should go to things file\r\napp.use('/things', thing);\r\n// handle endpoints that start with things with things\r\n\r\n\r\n// load view engine\r\napp.set('views', path.join(__dirname, \"views\"));\r\napp.set(\"view engine\", \"pug\");\r\n\r\n\r\nconst {sup, sup2} = require(\"./middle\");\r\n\r\nlet port = process.env.port || 3000;\r\n\r\nlet acceptedOrigin = [\"http://www.example1.com\", \"http://www.example2.com\",]\r\n\r\nlet corsOption = { origin: function corsCheck(origin, callback){\r\n\r\n\r\n    let originState, error;\r\n\r\n    if( acceptedOrigin.indexOf(origin) !== -1 || !origin){\r\n\r\n        originState = {origin: true}\r\n        error = null;\r\n    }\r\n\r\n    else{\r\n\r\n        originState ={origin: false}\r\n        error = new Error(\"this origin isnot allowded\")\r\n    }\r\n\r\n    callback( error, originState);\r\n}\r\n}\r\n\r\n\r\n// for all request\r\n// app.use(sup);\r\n\r\napp.use(router);\r\n\r\n// ---------------------------------------------------------------------------\r\n// adding middleware after the route will call this middleware to this specific condition in a order they appear and \r\n// then the request handler is called at last\r\n\r\n\r\nrouter.get(\"/\",  cors(corsOption), sup, sup2, (req, res)=>{\r\n\r\n    res.render('index');\r\n    end();\r\n    console.log(req.url);\r\n    console.log(\"root url is called\");\r\n    // sendfile demand absolute path so for that we have option with root\r\n    res.sendFile('index.html', {root: path.join( __dirname, '/public/')});\r\n    //note that we are not providing absolute path by our own or with __dirname concatinated with public \r\n    // because this may conflict with the convention of front slash and back slash so here path.join() come handy\r\n\r\n});\r\n\r\n// Redirect OLD url to NEW ------------------------------------------------------------\r\n\r\nrouter.get(\"/old\", (req, res)=>{\r\n\r\n    res.redirect(302, \"/new\");\r\n\r\n});\r\n\r\nrouter.get(\"/new\", (req, res)=>{\r\n\r\n    res.send(\"<h1> I AM NEW </h1>\");\r\n});\r\n\r\n// -------------------------------------------------------------------------------------\r\n\r\n// here since we have option with false indexing mean that it wont take index.html as a default file for 404 in static serve also\r\napp.use(express.static('public', {index: false}));\r\n\r\napp.listen(port, (err)=> {\r\n    if(err){\r\n        return(console.log(\"i am listening\"));\r\n    }\r\n    console.log(`listening to the port ${port}`);\r\n});"],"file":"index.dev.js"}