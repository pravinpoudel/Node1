{"version":3,"sources":["index.js"],"names":["express","require","path","http","cors","thing","apiRoute","mongoose","router","Router","sup","sup2","port","process","env","config","app","console","log","DB_CONNECT","connect","useNewUrlParser","useUnifiedTopology","then","err","use","json","set","join","__dirname","acceptedOrigin","corsOption","origin","corsCheck","callback","originState","error","indexOf","Error","get","req","res","render","end","url","sendFile","root","redirect","send","index","listen"],"mappings":"AAAA;;AACA,IAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,IAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB;;AACA,IAAME,IAAI,GAAGF,OAAO,CAAC,MAAD,CAApB;;AACA,IAAMG,IAAI,GAAGH,OAAO,CAAC,MAAD,CAApB;;AACA,IAAMI,KAAK,GAAGJ,OAAO,CAAC,iBAAD,CAArB;;AACA,IAAMK,QAAQ,GAAGL,OAAO,CAAC,mBAAD,CAAxB;;AACA,IAAMM,QAAQ,GAAGN,OAAO,CAAC,UAAD,CAAxB;;AACA,IAAMO,MAAM,GAAGR,OAAO,CAACS,MAAR,EAAf;;eACoBR,OAAO,CAAC,UAAD,C;IAApBS,G,YAAAA,G;IAAKC,I,YAAAA,I;;AACZ,IAAIC,IAAI,GAAGC,OAAO,CAACC,GAAR,CAAYF,IAAZ,IAAoB,IAA/B;;AAEAX,OAAO,CAAC,QAAD,CAAP,CAAkBc,MAAlB;;AAEA,IAAMC,GAAG,GAAGhB,OAAO,EAAnB;AACAiB,OAAO,CAACC,GAAR,CAAYL,OAAO,CAACC,GAAR,CAAYK,UAAxB;AACAZ,QAAQ,CAACa,OAAT,CAAiBP,OAAO,CAACC,GAAR,CAAYK,UAA7B,EAAyC;AAAEE,EAAAA,eAAe,EAAE,IAAnB;AAA0BC,EAAAA,kBAAkB,EAAE;AAA9C,CAAzC,EAA+FC,IAA/F,CAAoG,YAAI;AACtGN,EAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACD,CAFD,WAES,UAACM,GAAD,EAAO;AACZP,EAAAA,OAAO,CAACC,GAAR,WAAeM,GAAf;AACH,CAJD;AAMAR,GAAG,CAACS,GAAJ,CAAQrB,IAAI,EAAZ;AAEAY,GAAG,CAACS,GAAJ,CAAQzB,OAAO,CAAC0B,IAAR,EAAR,E,CACA;;AAEAV,GAAG,CAACS,GAAJ,CAAQ,SAAR,EAAmBpB,KAAnB,E,CACA;;AACAW,GAAG,CAACS,GAAJ,CAAQ,MAAR,EAAgBnB,QAAhB,E,CAEA;;AACAU,GAAG,CAACW,GAAJ,CAAQ,OAAR,EAAiBzB,IAAI,CAAC0B,IAAL,CAAUC,SAAV,EAAqB,OAArB,CAAjB;AACAb,GAAG,CAACW,GAAJ,CAAQ,aAAR,EAAuB,KAAvB;AAIA,IAAIG,cAAc,GAAG,CAAC,yBAAD,EAA4B,yBAA5B,EAAuD,uBAAvD,CAArB;AAEA,IAAIC,UAAU,GAAG;AAAEC,EAAAA,MAAM,EAAE,SAASC,SAAT,CAAmBD,MAAnB,EAA2BE,QAA3B,EAAoC;AAG3D,QAAIC,WAAJ,EAAiBC,KAAjB;;AAEA,QAAIN,cAAc,CAACO,OAAf,CAAuBL,MAAvB,MAAmC,CAAC,CAApC,IAAyC,CAACA,MAA9C,EAAqD;AAEjDG,MAAAA,WAAW,GAAG;AAACH,QAAAA,MAAM,EAAE;AAAT,OAAd;AACAI,MAAAA,KAAK,GAAG,IAAR;AACH,KAJD,MAMI;AAEAD,MAAAA,WAAW,GAAE;AAACH,QAAAA,MAAM,EAAE;AAAT,OAAb;AACAI,MAAAA,KAAK,GAAG,IAAIE,KAAJ,CAAU,4BAAV,CAAR;AACH;;AAEDJ,IAAAA,QAAQ,CAAEE,KAAF,EAASD,WAAT,CAAR;AACH;AAlBgB,CAAjB,C,CAsBA;AACA;;AAEAnB,GAAG,CAACS,GAAJ,CAAQjB,MAAR,E,CAEA;AACA;AACA;;AAGAA,MAAM,CAAC+B,GAAP,CAAW,GAAX,EAAiBnC,IAAI,CAAC2B,UAAD,CAArB,EAAmCrB,GAAnC,EAAwCC,IAAxC,EAA8C,UAAC6B,GAAD,EAAMC,GAAN,EAAY;AAEtDA,EAAAA,GAAG,CAACC,MAAJ,CAAW,OAAX;AACAC,EAAAA,GAAG;AACH1B,EAAAA,OAAO,CAACC,GAAR,CAAYsB,GAAG,CAACI,GAAhB;AACA3B,EAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EALsD,CAMtD;;AACAuB,EAAAA,GAAG,CAACI,QAAJ,CAAa,YAAb,EAA2B;AAACC,IAAAA,IAAI,EAAE5C,IAAI,CAAC0B,IAAL,CAAWC,SAAX,EAAsB,UAAtB;AAAP,GAA3B,EAPsD,CAQtD;AACA;AAEH,CAXD,E,CAaA;;AAEArB,MAAM,CAAC+B,GAAP,CAAW,MAAX,EAAmB,UAACC,GAAD,EAAMC,GAAN,EAAY;AAE3BA,EAAAA,GAAG,CAACM,QAAJ,CAAa,GAAb,EAAkB,MAAlB;AAEH,CAJD;AAMAvC,MAAM,CAAC+B,GAAP,CAAW,MAAX,EAAmB,UAACC,GAAD,EAAMC,GAAN,EAAY;AAE3BA,EAAAA,GAAG,CAACO,IAAJ,CAAS,qBAAT;AACH,CAHD,E,CAKA;AAEA;;AACAhC,GAAG,CAACS,GAAJ,CAAQzB,OAAO,UAAP,CAAe,QAAf,EAAyB;AAACiD,EAAAA,KAAK,EAAE;AAAR,CAAzB,CAAR;AAEAjC,GAAG,CAACkC,MAAJ,CAAWtC,IAAX,EAAiB,UAACY,GAAD,EAAQ;AACrB,MAAGA,GAAH,EAAO;AACH,WAAOP,OAAO,CAACC,GAAR,CAAY,gBAAZ,CAAP;AACH;;AACDD,EAAAA,OAAO,CAACC,GAAR,iCAAqCN,IAArC;AACH,CALD","sourcesContent":["\"use strict\";\r\nconst express = require(\"express\");\r\nconst path = require(\"path\");\r\nconst http = require(\"http\");\r\nconst cors = require(\"cors\");\r\nconst thing = require(\"./routes/things\");\r\nconst apiRoute = require(\"./routes/apiRoute\");\r\nconst mongoose = require(\"mongoose\");\r\nconst router = express.Router();\r\nconst {sup, sup2} = require(\"./middle\");\r\nlet port = process.env.port || 4000;\r\n\r\nrequire(\"dotenv\").config();\r\n\r\nconst app = express();\r\nconsole.log(process.env.DB_CONNECT)\r\nmongoose.connect(process.env.DB_CONNECT, { useNewUrlParser: true , useUnifiedTopology: true }).then(()=>{\r\n  console.log(\"sucessfully connected\");\r\n}).catch((err)=>{\r\n    console.log(`${err} error is in the program`)\r\n});\r\n\r\napp.use(cors());\r\n\r\napp.use(express.json());\r\n// anything that begins with things should go to things file\r\n\r\napp.use('/things', thing);\r\n// handle endpoints that start with things with things\r\napp.use(\"/api\", apiRoute);\r\n\r\n// load view engine\r\napp.set('views', path.join(__dirname, \"views\"));\r\napp.set(\"view engine\", \"pug\");\r\n\r\n\r\n\r\nlet acceptedOrigin = [\"http://www.example1.com\", \"http://www.example2.com\", \"http://localhost:3000\"]\r\n\r\nlet corsOption = { origin: function corsCheck(origin, callback){\r\n\r\n\r\n    let originState, error;\r\n\r\n    if( acceptedOrigin.indexOf(origin) !== -1 || !origin){\r\n\r\n        originState = {origin: true}\r\n        error = null;\r\n    }\r\n\r\n    else{\r\n\r\n        originState ={origin: false}\r\n        error = new Error(\"this origin isnot allowded\")\r\n    }\r\n\r\n    callback( error, originState);\r\n}\r\n}\r\n\r\n\r\n// for all request\r\n// app.use(sup);\r\n\r\napp.use(router);\r\n\r\n// ---------------------------------------------------------------------------\r\n// adding middleware after the route will call this middleware to this specific condition in a order they appear and \r\n// then the request handler is called at last\r\n\r\n\r\nrouter.get(\"/\",  cors(corsOption), sup, sup2, (req, res)=>{\r\n\r\n    res.render('index');\r\n    end();\r\n    console.log(req.url);\r\n    console.log(\"root url is called\");\r\n    // sendfile demand absolute path so for that we have option with root\r\n    res.sendFile('index.html', {root: path.join( __dirname, '/public/')});\r\n    //note that we are not providing absolute path by our own or with __dirname concatinated with public \r\n    // because this may conflict with the convention of front slash and back slash so here path.join() come handy\r\n\r\n});\r\n\r\n// Redirect OLD url to NEW ------------------------------------------------------------\r\n\r\nrouter.get(\"/old\", (req, res)=>{\r\n\r\n    res.redirect(302, \"/new\");\r\n\r\n});\r\n\r\nrouter.get(\"/new\", (req, res)=>{\r\n\r\n    res.send(\"<h1> I AM NEW </h1>\");\r\n});\r\n\r\n// -------------------------------------------------------------------------------------\r\n\r\n// here since we have option with false indexing mean that it wont take index.html as a default file for 404 in static serve also\r\napp.use(express.static('public', {index: false}));\r\n\r\napp.listen(port, (err)=> {\r\n    if(err){\r\n        return(console.log(\"i am listening\"));\r\n    }\r\n    console.log(`listening to the port ${port}`);\r\n});"],"file":"index.dev.js"}